---
import { getI18n } from "../../i18n";
const timelineDataES = [
    {
        title: "Grado en Ingeniería de Software (UCM)",
        date: "2019 - 2024",
        description:
            "5 años de formación universitaria en Ingeniería de Software en la <a href='https://www.ucm.es/' alt='UCM' title='UCM' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>Universidad Complutense de Madrid</a>, adquiriendo conocimientos en programación (Java, Python, C++), bases de datos (SQL, NoSQL), desarrollo web (HTML, CSS, JavaScript), metodologías ágiles (Scrum), y herramientas como Bash, Node.js, Phaser y MongoDB.",
        type: "degree",
        color: "#4F46E5",
    },
    {
        title: "Prácticas en LiveMed",
        date: "2023 - 2024",
        description:
            "Durante las prácticas en <a href='https://www.livemed.in/es/' alt='LiveMed' title='LiveMed' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>LiveMed</a>, trabajé mejorando expresiones regulares (Regex), optimizando scripts y aprendí a usar Python y Odoo para la automatización y gestión de procesos internos. Estas experiencias me permitieron mejorar mis habilidades técnicas y aprender a gestionar proyectos en un entorno real.",
        type: "internship",
        color: "#10B981",
    },
    {
        title: "Desarrollador en Slashmobility",
        date: "2024 - Presente",
        description:
            "Actualmente trabajando como desarrollador en <a href='https://slashmobility.com/' alt='Slashmobility' title='Slashmobility' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>Slashmobility</a>, donde implemento tecnologías como Vue, React, React Native, y Astro. Además, participo en el desarrollo de aplicaciones web y móviles, y sigo perfeccionando mis habilidades en el diseño y la arquitectura de software en un entorno ágil y colaborativo.",
        type: "job",
        color: "#F59E0B",
    },
];
const timelineDataEN = [
    {
        title: "Bachelor's Degree in Software Engineering (UCM)",
        date: "2019 - 2024",
        description:
            "5 years of university education in Software Engineering at <a href='https://www.ucm.es/' alt='UCM' title='UCM' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>Complutense University of Madrid</a>, acquiring knowledge in programming (Java, Python, C++), databases (SQL, NoSQL), web development (HTML, CSS, JavaScript), agile methodologies (Scrum), and tools such as Bash, Node.js, Phaser, and MongoDB.",
        type: "degree",
        color: "#4F46E5",
    },
    {
        title: "Internship at LiveMed",
        date: "2023 - 2024",
        description:
            "During my internship at <a href='https://www.livemed.in/es/' alt='LiveMed' title='LiveMed' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>LiveMed</a>, I worked on improving regular expressions (Regex), optimizing scripts, and learned how to use Python and Odoo for automation and internal process management. These experiences allowed me to improve my technical skills and learn how to manage projects in a real-world environment.",
        type: "internship",
        color: "#10B981",
    },
    {
        title: "Developer at Slashmobility",
        date: "2024 - Present",
        description:
            "Currently working as a developer at <a href='https://slashmobility.com/' alt='Slashmobility' title='Slashmobility' style='color: ${item.color}' target='_blank' rel='noopener noreferrer'>Slashmobility</a>, where I implement technologies such as Vue, React, React Native, and Astro. In addition, I participate in the development of web and mobile applications, continuing to refine my skills in software design and architecture in an agile and collaborative environment.",
        type: "job",
        color: "#F59E0B",
    },
];

const { currentLocale } = Astro;
const i18n = getI18n({currentLocale});
const timelineData = currentLocale === "es" ? timelineDataES : timelineDataEN;
---

<section id="timeline" class="py-12 relative scroll-mt-[100px] sm:scroll-mt-0">
    <div class="absolute right-0 top-0 h-full w-full flex justify-end pointer-events-none z-0">
        <div
            class="w-28 h-28 overflow-auto flex rounded-xl relative blur-2xl"
        >
            <span
                class="absolute w-16 h-16 -bottom-1 -left-1 bg-green-500 rounded-md rotate-45"
            ></span>
            <span
                class="absolute w-16 h-16 -top-1 -right-1 bg-primary rounded-md rotate-45"
            ></span>
        </div>
    </div>
    <div class="absolute left-0 bottom-0 h-full w-full flex items-end pointer-events-none z-0">
        <div
            class="w-28 h-28 overflow-auto flex rounded-xl relative blur-2xl"
        >
            <span
                class="absolute w-16 h-16 -top-1 -right-1 bg-green-500 rounded-md rotate-45"
            ></span>
            <span
                class="absolute w-16 h-16 -bottom-1 -right-1 bg-[#FCDC58] rounded-md rotate-45"
            ></span>
        </div>
    </div>
    <h2 class="text-3xl font-bold text-center mb-8">{i18n.trayectory.title}</h2>
    <div id="topTimeLine" class="relative flex justify-center">
        <div id="line1" class="timeline-line absolute w-1 top-0 transition-all"></div>

        <div class="space-y-12">
            {timelineData.map((item, index) => (
                <div
                    data-index={index}
                    class={`relative flex items-center justify-center ${index % 2 === 0 ? "lg:justify-start" : "lg:justify-end"}`}
                >
                    <div
                        id={`dot-${index}`}
                        class="absolute w-6 h-6 bg-white border-4 rounded-full z-10 dot"
                        style={`border-color: ${item.color}; left: 50%; transform: translateX(-50%); opacity: 0;`}
                    />
                    <div
                        class={`w-[90%] lg:w-4/12 p-6 bg-box-bg shadow-md rounded-lg transition-transform duration-1000 ease-out opacity-0 card ${index % 2 === 0 ? "from-left lg:ml-40 ml-0" : "from-right lg:mr-40 mr-0"}`}
                        style={`border-left: 4px solid ${item.color};`}
                    >
                        <h3 class="text-xl font-semibold" style={`color: ${item.color}`}>{item.title}</h3>
                        <p class="text-sm text-heading-3">{item.date}</p>
                        <p class="mt-2 text-heading-1" id={`desc-${index}`} set:html={item.description}/>
                    </div>
                </div>
            ))}
        </div>
    </div>
    <div id="current" class="text-xl font-semibold mt-12 text-center">{i18n.trayectory.actuality}</div>
</section>

<style>
    .timeline-line {
        background: linear-gradient(to bottom, #4f46e5, #10b981, #f59e0b);
        height: 0%;
        transition: height 1s ease-out;
        position: absolute;
        top: 0;
        border-radius: 5px;
    }
    
    .timeline-line.active {
        height: 50%;
    }
    
    .dot-visible {
        opacity: 1 !important;
        transform: scale(1);
        transition: opacity 1s ease-out, transform 1s ease-out;
    }
    
    .card.visible {
        opacity: 1;
        transform: translateX(0);
    }

    .from-left {
        transform: translateX(-100vw);
    }

    .from-right {
        transform: translateX(100vw);
    }
    
    #timeline div:hover {
        transform: translateY(-4px);
        transition: transform 0.3s ease;
    }

    #current{
        opacity: 0;
        transition: opacity 2s ease-out;
    }

    :global(#desc-0 a) {
        color: #4F46E5;
    }
    :global(#desc-1 a) {
        color: #10B981;
    }
    :global(#desc-2 a) {
        color: #F59E0B;
    }

    :global(#timeline a){
        text-decoration: none;
        font-weight: bold;
    }

    :global(#timeline a:hover) {
        text-decoration: underline;
    }

    @media (max-width: 1025px) {
        .dot {
            opacity: 0 !important;
        }
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const timelineData = [
            {
                title: "Grado en Ingeniería Informática",
                date: "2019 - 2024",
                description: "5 años de formación universitaria en ingeniería informática, adquiriendo conocimientos en programación, bases de datos, y desarrollo de software.",
                type: "degree",
                color: "#4F46E5",
            },
            {
                title: "Prácticas en Empresa",
                date: "2023 (6 meses)",
                description: "Prácticas profesionales en una empresa del sector tecnológico, trabajando en proyectos reales y mejorando habilidades técnicas y de trabajo en equipo.",
                type: "internship",
                color: "#10B981",
            },
            {
                title: "Desarrollador en [Empresa Actual]",
                date: "2023 - Presente",
                description: "Actualmente trabajando como desarrollador, participando en el desarrollo de aplicaciones web y contribuyendo a proyectos innovadores.",
                type: "job",
                color: "#F59E0B",
            },
        ];
        
        let isAnimating = false;
        document.addEventListener("scroll", () => {
            const cards = document.querySelectorAll(".card");
            const dots = document.querySelectorAll(".timeline-line + div > .relative .absolute");
            const lines = document.querySelectorAll(".timeline-line");
            const windowHeight = window.innerHeight;
            const getTimelineTop = document.getElementById("timeline")

            if(getTimelineTop === null) return;
            const timelineTop = getTimelineTop.getBoundingClientRect().top;
    
            if (timelineTop < windowHeight - 100 && !isAnimating) {
                isAnimating = true;
                let delay = 0;
                let val = 0;
    
                function animateTimeline() {
                    const line = lines[0];
                    timelineData.forEach((item, index) => {
                        setTimeout(() => {
                            const dot = document.getElementById(`dot-${index}`);
                            const card = cards[index];
    
                            val += animateLineToDot(index, val);
    
                            const gradient = getGradient(index);
                            line.style.background = gradient;
    
                            line.style.height = `${val}%`;
    
                            setTimeout(() => {
                                dot.classList.add("dot-visible");
                                card.classList.add("visible");
                            }, 500);
                        }, delay);
    
                        delay += 2000;
                    });
                    setTimeout(() => {
                        val += animateLineToDot(timelineData.length + 1 , val);
                        const gradient = getGradient(timelineData.length + 1);
                        line.style.background = gradient;
    
                        line.style.height = `${val}%`;
                        document.getElementById("current").style.opacity = "1";
                    }, delay);
                }
    
                animateTimeline();
            }
        });
    
        function getGradient(index) {
            const colors = timelineData.map(item => item.color);
            if (index === 0) {
                return `linear-gradient(to bottom, ${colors[0]}, ${colors[0]})`;
            } else if (index === 1) {
                return `linear-gradient(to bottom, ${colors[0]}, ${colors[1]})`;
            } else if (index === 2) {
                return `linear-gradient(to bottom, ${colors[0]}, ${colors[1]}, ${colors[2]})`;
            } else {
                return `linear-gradient(to bottom, ${colors[0]}, ${colors[1]}, ${colors[2]})`;
            }
        }
    
        function animateLineToDot(index, val) {
            let dot1 = null;
            let dot2 = null;
            if(index === 0){
                dot1 = document.getElementById(`dot-${index}`);
            } else {
                dot1 = document.getElementById(`dot-${index - 1}`);
                dot2 = document.getElementById(`dot-${index}`);
            }
            const timeline = document.getElementById("topTimeLine");
            if (index === 0) {
                const timelineRect = timeline.getBoundingClientRect();
                const dotPosition1 = dot1.getBoundingClientRect().top - timelineRect.top;
                const timelineHeight = timelineRect.height;
                return (dotPosition1 / timelineHeight) * 100;
            } else if (dot2) {
                const dotPosition1 = dot1.getBoundingClientRect().top;
                const dotPosition2 = dot2.getBoundingClientRect().top;
                const timelineHeight = timeline.getBoundingClientRect().height;
                const distance = dotPosition2 - dotPosition1;
                return (distance / timelineHeight) * 100;
            }
    
            return 102 - val;
        }
    });
</script>

